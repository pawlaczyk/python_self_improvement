#coding=utf-8
#strona tytulowa po nazwie raportu
#katalogi struktura ogarnięcie wedlug nazwy , sruktura jak z googla plikow
import MySQLdb
import logging
import main2
import PyPDF2
import pdfquery
import pdfminer
import re
import latexPDF
import os

objectsVulerabilities = []

class Vulnerability:
    def __init__(self, nazwa, nazwaZagrozenia, ID, poziomKrytycznosci,opis, skutek, opisTechniczny, rekomendacja, cve):
        self.nazwa = nazwa
        self.nazwaZagrozenia = nazwaZagrozenia
        self.ID = ID
        try:
            self.poziomKrytycznosci = float(poziomKrytycznosci)
        except:
            self.poziomKrytycznosci = 0.0
        self.opis = opis
        self.skutek = skutek
        self.opisTechniczny = opisTechniczny
        self.rekomendacja = rekomendacja
        self.cve = cve

    def writeToTablePDF(self, nazwaPliku='_', sciezka=''):
        #nazwa = "NazwaZagrozenia", id="ID", poziom=0, opisZagrozenia = 'opis', skutek = 'skutek', nazwaPliku='_', opisTechniczny='Techniczny', rekomendacja='rekomendacja', sciezka=''
        latexPDF.createTableVulnerabilities(nazwa=self.nazwaZagrozenia, id=self.ID, poziom=self.poziomKrytycznosci, opisZagrozenia=self.opis,
                                            skutek=self.skutek, opisTechniczny=self.opisTechniczny, rekomendacja=self.rekomendacja, sciezka=sciezka, nazwaPliku=nazwaPliku)

#--------------------------------------------------------- Połączenie z bazą -------------------------------------------
def connectToDatabase(name):
    db = MySQLdb.connect(host="localhost",    # your host, usually localhost
                         user="root",         # your username
                         passwd="admin",  # your password
                         db=name)        # name of the data base

    # you must create a Cursor object. It will let
    #  you execute all the queries you need
    cur = db.cursor()
    print "Połączono"
    # tworzenie tabel
    # execute SQL query using execute() method.
    cur.execute("SELECT VERSION()")

    # Fetch a single row using fetchone() method.
    data = cur.fetchone()

    print "Database version : %s " % data

    sql = " USE " + name + " ;"
    cur.execute(sql)
    return cur, db

def executeSQLCommand(cur,db, sql):
    try:
        # Execute the SQL command
        cur.execute(sql)
        # Commit your changes in the database
        db.commit()
    except:
        # Rollback in case there is any error
        db.rollback()

    #db.close()

def readVulnerabilitiesFromFile(cur, db, filename, raportName="Raport"):
    nameVulnerability = ''
    id = ''
    level = ''
    description = ''
    result = ''
    specyfication = ''
    recomendation = ''
    cve = ''

    name = str(filename.split('.')[0])
    name = name.split('_')[1]
    print name

    with open(filename) as f:
        text = f.read()

    lista = re.split('<[a-zA-Z]+[>]',text )
    for i in lista:
        if '<CVE/>' in i:
            r2 = re.split('<[a-zA-Z]+/[>]', str(i))
            cve = r2[0]

        if '<Rekomendacja/>' in i:
            r2 = re.split('<[a-zA-Z]+/[>]', str(i))
            recomendation = r2[0]

        if '<PoziomKrytycznosci/>' in i:
            r2 = re.split('<[a-zA-Z]+/[>]', str(i))
            level = r2[0]

        if '<NazwaZagrozenia/>' in i:
            r2 = re.split('<[a-zA-Z]+/[>]', str(i))
            nameVulnerability = r2[0]

        if '<ID/>' in i:
            r2 = re.split('<[a-zA-Z]+/[>]', str(i))
            id = r2[0]

        if '<Opis/>' in i:
            r2 = re.split('<[a-zA-Z]+/[>]', str(i))
            description = r2[0]

        if '<OpisTechniczny/>' in i:
            r2 = re.split('<[a-zA-Z]+/[>]' ,str(i))
            specyfication = r2[0]


    vulnerability = Vulnerability(name,nameVulnerability, id, level,description, result, specyfication, recomendation, cve)
    objectsVulerabilities.append(vulnerability)
    return cur, db, name

def saveVulnerabilitiesTXT(objectsVulerabilities, name, raportName="Raport"):

    try:
        os.makedirs(str(raportName) + '_PodatnoscTXT')
    except OSError:
        pass

    __file__ = str(raportName) + '_PodatnoscTXT'
    path = os.path.realpath(__file__)

    for i in objectsVulerabilities:
        i.writeToTablePDF(sciezka=path, nazwaPliku= i.nazwa)
    #addToVulnerabilities(cur, db, name, level, description, result, specyfication, recomendation, cve )

def addToVulnerabilities(cur, db, name, level, description, result, specyfication, recomendation, cve ):

    data = "'"+str(name)+"','"+str(level)+"','"+ str(result)+"','"+str(description)+"','"+str(specyfication)+"','"+str(recomendation)+"','"+str(cve)+"'"

    sql = """
            INSERT INTO Podatnosci ( NazwaZagrozenia, PoziomKrytycznosci, Skutek, Opis, OpisTechniczny, Rekomendacje, CVE)
             VALUES ( """ + data + """ );
            """

    cur.execute(sql)
    return cur, db

def createTableVulnerability(cur, db):
    """Funkcja Tworząca tabelę Podatności
    name, ID, level, description, resul, specyfication
    -------------------------------------------
    """
    sql ="""
            CREATE TABLE IF NOT EXISTS Podatnosci(
            Podatnoscid MEDIUMINT NOT NULL AUTO_INCREMENT,
            NazwaZagrozenia VARCHAR(30),
            PoziomKrytycznosci VARCHAR(45),
            Skutek VARCHAR(9),
            Opis MEDIUMTEXT,
            OpisTechniczny MEDIUMTEXT,
            Rekomendacje MEDIUMTEXT,
            CVE VARCHAR(15),
            PRIMARY  KEY(Podatnoscid)
            );
        """

    cur.execute(sql)
    return cur, db


def main():
    name = "VulnerabilityDB6"
    cur, db = connectToDatabase(name)
    cur, db = createTableVulnerability(cur, db)
    #addToVulnerabilities(cur, db, 'Nazwa2', 'Level', 'Skutek', 'Opis', 'OpisTechniczny', 'Rekomndacje', 'CVE')
    cur, db = addToVulnerabilities(cur, db, 'name', 'level', 'description', 'result', 'specyfication', 'recomendation', 'cve')
    cur, db, name = readVulnerabilitiesFromFile(cur, db, 'podatnosc_bgp.txt')
    saveVulnerabilitiesTXT(objectsVulerabilities, name)
    #return cur, db
    db.close()

if __name__ == "__main__":
    main()